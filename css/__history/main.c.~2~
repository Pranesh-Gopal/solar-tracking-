#include <16F877A.h>
#device ADC=10

#FUSES NOWDT                    //No Watch Dog Timer
#FUSES PUT                      //Power Up Timer
#FUSES NOBROWNOUT               //No brownout reset
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O

#use delay(crystal=4MHz)

#define LCD_ENABLE_PIN PIN_D2
#define LCD_RS_PIN PIN_D0
#define LCD_RW_PIN PIN_D1
#define LCD_DATA4 PIN_D4
#define LCD_DATA5 PIN_D5
#define LCD_DATA6 PIN_D6
#define LCD_DATA7 PIN_D7

#include <lcd.c>

#define MOTOR_PIN PIN_B0
#define GREEN_LED PIN_B7
#define RED_LED PIN_B6

int16 LDR1, LDR2;
int16 diff;
const int16 threshold = 7; // Value difference to move the motor

void main()
{
   // Setup ADC
   setup_adc_ports(ALL_ANALOG);
   setup_adc(ADC_CLOCK_INTERNAL);
   
   // Initialize LCD
   lcd_init();
   
   // Set motor and LEDs as output
   output_low(MOTOR_PIN);  // Stop motor initially
   output_low(RED_LED);    // Red LED off initially
   output_low(GREEN_LED);  // Green LED off initially
   
   while(TRUE)
   {
      // Read LDR1 (RA2)
      set_adc_channel(2);
      delay_ms(10);  // Wait for ADC to stabilize
      LDR1 = read_adc();
      
      // Read LDR2 (RA3)
      set_adc_channel(3);
      delay_ms(10);  // Wait for ADC to stabilize
      LDR2 = read_adc();
      
      // Calculate difference between LDRs
      diff = abs(LDR1 - LDR2);
      
      // Display LDR values on LCD
      lcd_gotoxy(1, 1);
      printf(lcd_putc, "LDR1: %4lu", LDR1); // Display LDR1 value
      lcd_gotoxy(1, 2);
      printf(lcd_putc, "LDR2: %4lu", LDR2); // Display LDR2 value

      // Check if difference is greater than or equal to 7
      if(diff >= threshold)
      {
         // Move motor toward the direction of higher light intensity
         output_high(MOTOR_PIN);   // Start motor
         output_high(GREEN_LED);   // Green LED ON
         output_low(RED_LED);      // Red LED OFF
      }
      else
      {
         // Stop motor
         output_low(MOTOR_PIN);    // Stop motor
         output_high(RED_LED);     // Red LED ON
         output_low(GREEN_LED);    // Green LED OFF
      }
      
      delay_ms(500);  // Update every half second
   }
}

