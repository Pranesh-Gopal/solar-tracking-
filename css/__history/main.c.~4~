#include <16F877A.h>
#device ADC=10

#FUSES NOWDT                    //No Watch Dog Timer
#FUSES PUT                      //Power Up Timer
#FUSES NOBROWNOUT               //No brownout reset
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O

#use delay(crystal=4MHz)

#define LCD_ENABLE_PIN PIN_D2
#define LCD_RS_PIN PIN_D0
#define LCD_RW_PIN PIN_D1
#define LCD_DATA4 PIN_D4
#define LCD_DATA5 PIN_D5
#define LCD_DATA6 PIN_D6
#define LCD_DATA7 PIN_D7

#include <lcd.c>
#include <math.h>

// Servo control pin
#define SERVO_PIN PIN_B0  
#define GREEN_LED PIN_B7  // Green LED when motor is running
#define RED_LED PIN_B6    // Red LED when motor is stopped

int16 LDR1, LDR2;  
int16 diff;        
const int16 threshold = 50;  
int16 sayac1 = 1500, sayac2 = 1500;  // Servo pulse width (initially at center position)

void move_servo()
{
   output_high(SERVO_PIN);
   delay_us(sayac1);   // Adjust pulse width to control the servo position
   output_low(SERVO_PIN);
   delay_us(20000 - sayac1);  // Ensure total period is 20ms (50Hz)
}

void main()
{
   // Setup ADC
   setup_adc_ports(ALL_ANALOG);
   setup_adc(ADC_CLOCK_INTERNAL);
   
   // Initialize LCD
   lcd_init();
   
   // Initialize pins for servo and LEDs
   set_tris_b(0x00);      // Set PORT B as output for servo and LEDs
   output_low(SERVO_PIN); // Stop servo initially
   output_low(GREEN_LED); // Green LED off initially
   output_low(RED_LED);   // Red LED off initially
   
   while(TRUE)
   {
      // Read LDR1 (RA2)
      set_adc_channel(2);
      delay_ms(10);
      LDR1 = read_adc();
      
      // Read LDR2 (RA3)
      set_adc_channel(3);
      delay_ms(10);
      LDR2 = read_adc();
      
      // Calculate difference between LDRs
      diff = abs(LDR1 - LDR2);
      
      // Display LDR values on LCD
      lcd_gotoxy(1, 1);
      printf(lcd_putc, "LDR1: %4lu", LDR1);
      lcd_gotoxy(1, 2);
      printf(lcd_putc, "LDR2: %4lu", LDR2);

      // Check difference between LDR values
      if(diff >= threshold)
      {
         if(LDR1 > LDR2)
         {
            // Increase pulse width to move right
            output_low(RED_LED);
            output_high(GREEN_LED);
            move_servo();
            sayac2 = sayac1;
            if(sayac1 <= 2600) {
               sayac1 = sayac1 + 10;  // Move servo to the right
            }
         }
         else if(LDR2 > LDR1)
         {
            // Decrease pulse width to move left
            output_low(RED_LED);
            output_high(GREEN_LED);
            move_servo();
            sayac1 = sayac2;
            if(sayac2 >= 600) {
               sayac2 = sayac2 - 10;  // Move servo to the left
            }
         }
      }
      else
      {
         // Stop the motor
         output_high(RED_LED);  // Red LED ON (motor stopped)
         output_low(GREEN_LED); // Green LED OFF
      }
      
      delay_ms(500);  // Slow down the loop for better observation
   }
}

